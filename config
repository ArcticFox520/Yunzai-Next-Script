black="\e[30m"
red="\033[31m"
green="\033[32m"
yellow="\033[33m"
blue="\033[34m"
purple="\033[35m"
cyan="\033[36m"
white="\033[37m"
background="\033[0m"

GithubMirror="https://mirrors.chenby.cn/"

if [ -x /usr/local/NodeJS/bin/node ]
then
  export PATH=$PATH:/usr/local/NodeJS/bin
fi

function Download(){
file="$1"
URL="$2"
local i=0
if wget --help | grep -q show-progress 
then
  echo -e ${blue}[${green}*${blue}] ${cyan}正在下载 ${yellow}${file}${cyan}${background}
  until wget -q --show-progress -O ${file} -c ${URL}
  do
    if [ ${i} == 3 ]
    then
      echo -e ${blue}[${red}*${blue}] ${cyan}错误次数过多 ${yellow}退出${background}
      return 1
    fi
    i=$((${i}+1))
    echo -e ${blue}[${red}*${blue}] ${cyan}下载失败 ${yellow}三秒后重试${background}
    sleep 3s
  done
  echo -e ${blue}[${green}*${blue}] ${cyan}下载完成.${background}
  return 0
else
  echo -e ${blue}[${green}*${blue}] ${cyan}正在下载 ${yellow}${file}${cyan}${background}
  until wget -O ${file} -c ${URL}
  do
    if [ ${i} == 3 ]
    then
      echo -e ${blue}[${red}*${blue}] ${cyan}错误次数过多 ${yellow}退出${background}
      return 1
    fi
    i=$((i+1))
    echo -e ${blue}[${red}*${blue}] ${cyan}下载失败 ${yellow}三秒后重试${background}
    sleep 3s
  done
  echo -e ${blue}[${green}*${blue}] ${cyan}下载完成.${background}
  return 0
fi
}

Arch(){
case `dpkg --print-architecture` in
aarch64|arm64)
	echo arm64
	;;
x86_64|x64|amd64)
	echo x64
	;;
*)
	echo -e ${red}暂不支持的架构 ${cyan}$(dpkg --print-architecture)${background}
	until read
	do
	  echo -e ${red}暂不支持的架构 ${cyan}$(dpkg --print-architecture)${background}
	done
esac
}

function ErrorReturn(){
echo -en "
${white}————————————————————
    脚本运行出现${red}错误$white,请及时${blue}截图${white},保存报错信息,
    以与便开发者,${green}更好的${white}和${green}更快的${cyan}解决${white}问题.
${white}————————————————————${background}"
read
}

function SelectRegion(){
echo && echo -en " ${cyan}Yunzai-Next ${purple}一键安装管理脚本${background}
 ———————————————————
 ${cyan}请问您的设备所在位置是? 
    ${green}1${white}. 中国大陆 ${background}
    ${green}2${white}. 其他位置 ${background}
 ———————————————————
 ${cyan}请输入数字 ${white}[1-2]:${background} "
 read num
 case ${num} in
 1)
  return 0
  ;;
 2)
  return 1
  ;;
 *)
  echo -e ${red}输入错误 ${yellow}将保持默认 ${purple}中国大陆${background}
  return 0
  ;;
  esac
}

CheckNetwork(){
country=$(curl -sL ipinfo.io  | jq .country)
if [ -n ${country} ]
then
  if echo ${country} | grep -q CN
  then
    return 0
  else
    return 1
  fi
else
  if SelectRegion
  then
    return 0
  else
    return 1
  fi
fi
}

function Update(){
if [ -z ${Update} ]
then
  Command=$@
  ${Command}
  Update=true
fi
}

ManageSession(){
case $1 in
tmux)
  case $2 in
    start)
      if tmux new -s $3 -d "$4" > /dev/null
      then
        return 0
      else
        return 1
      fi
    ;;
    stop)
      if tmux kill-session -t $3 > /dev/null
      then
        return 0
      else
        return 1
      fi
    ;;
    restart)
      if tmux kill-session -t $3 && tmux new -s $3 -d "$4" > /dev/null
      then
        return 0
      else
        return 1
      fi
    ;;
    log)
      if tmux attach -t $3 > /dev/null
      then
        return 0
      else
        return 1
      fi
    ;;
    list)
      if tmux ls | grep -q $3
      then
        return 0
      else
        return 1
      fi
    ;;
  esac
;;
screen)
  case $2 in
    start)
      if screen -S $3 -d -m bash -c "$4"
      then
        return 0
      else
        return 1
      fi
      ;;
    stop)
      Session=$(screen -ls | grep $3 | awk '{print $1}')
      if screen -X -S ${Session} quit
      then
        return 0
      else
        return 1
      fi
      ;;
    restart)
      Session=$(screen -ls | grep $3 | awk '{print $1}')
      if screen -X -S ${Session} quit && screen -S ${Session} -d -m bash -c "$4"
      then
        return 0
      else
        return 1
      fi
      ;;
    log)
      Session=$(screen -ls | grep $3 | awk '{print $1}')
      if screen -r ${Session}
      then
        return 0
      else
        return 1
      fi
      ;;
    list)
      if screen -ls | grep -q $3
      then
        return 0
      esle
        return 1
      fi
      ;;
  esac
;;
pm2)
  case $2 in
    start)
      if pm2 start --name $3 "$4"
      then
        return 0
      else
        return 1
      fi
    ;;
    stop)
      if pm2 stop $3
      then
        return 0
      else
        return 1
      fi
    ;;
    restart)
      if pm2 stop $3 && pm2 start --name $3 "$4"
      then
        return 0
      else
        return 1
      fi
    ;;
    log)
      if pm2 logs $3 | sed '/PM2/d'
      then
        return 0
      else
        return 1
      fi
    ;;
    list)
      if pm2 list
      then
        return 0
      else
        return 1
      fi
    ;;
  esac
;;
esac
}
